TODO module_dev - delete before pulling, not needed

-situational_awareness/host/paranoia.py
    - Run in a loop forever and check for:
     - exe running a USB - highly indicative of IR doing a memdump
     - list of processes: sysinternals, known IR tools, wireshark, etc.
     - check to see if a user from a list of groups (DA,IT,etc) has logged in - and what procs they're running
     - Check for a list of PIDs and their CPU/Memory usage (IE: IR agents like Google's GRR) to see if they reach past a threshold
    - optionally report then peace the fuck out if any conditions are seen (taskkill /IM powershell.exe ?)
     -have this option be a cleanup script read at iex(gc $thelocalpath) - user has to set this up manually

-situational_awareness/host/appenum.py 
    - take existing code/port it for compatibility
    - ensure table output is clean
    - Implement 'Get-Process -FileinfoVersion' and install path detect if uninstall key not present
    - Common interesting config files? - different module...

-situational_awareness/host/windowenum.py  - identify who this user is/what they're doing - perhaps make 'monitor mode' ? 
    - Enumerate open windows and their properties for current user's desktop

-situational_awareness/host/proxyenum.py   - to know what we're up against
    - Enumerate proxy config from registry
    - Optionally connect to proxy or throw an error condition (invalid host header,etc) to identify it (simply shove out html or regex for websense/bluecoat/etc)
    - Optionally Provide a list of URLs to test for whitelist/content filtering (how 2 find baseline?)
    - Optionally check for SSL inspection - need a known CA for a common site and the ability to obtain its parameters thru winhttp

-situational_awareness/network/friendfinder.py   - quick recon, high stealth
    - arp -a, netstat -a, get-computerdetails(parse logons) = input
    - exclude domain controllers!
    - output=
    - smbscanner on the hosts to determine if login is possible for each host
    - sharefinder (might be redundant^ lol) on hosts that are leftover
    - OpenSCMangager() on hostlist identified
    - optionally stealth userhunter against usernames identified in get-computerdetails?
    - optionally check list of ports on identified hosts
=== module chaining - is it feasible? Needs a cache to avoid overusage of existing channel for no reason..==

-situational_awareness/network/pingscan.py
	- check if ping is enabled first by pinging loopback
	- optional: specify '*' to do subnets ie: 10.13.*.1 or 192.168.1.*  - 1-254
	- Use Test-Connection if we're running PS 3.0 or higher, if 2.0 use the binary... :(

-situational_awareness/network/pivotfinder.py
   - use win32_pingstatus through remote WMI to check a remote hosts connectivity to another remote host: Get-WmiObject Win32_pingStatus -ComputerName 10.1.0.128 -f "Address='10.1.0.130'"
     - many to many check: cycle through multiple servers (WMI) have them ping multiple servers
   - use clymb3r's Get-Computerdetails to get saved RDP profiles for each user.
   - handle CIDRs

-situational_awareness/network/historic_userfinder
  - use Get-Eventlog -Logname Security -computername host -After ((Get-Date).AddDays(-whatevernumbermaybeadayoraweek)) 
  - references:
  https://github.com/clymb3r/PowerShell/blob/master/Get-ComputerDetails/Get-ComputerDetails.ps1
  https://github.com/pdxcat/Get-LogonHistory/blob/master/Get-LogonHistory.ps1

-privesc/bypassuac_wmi_reflect
 - invoke-wmi on a remote host to invoke wmi back onto agents host to shove a stager back into a high integrity process
 - only requires LA on a remote host and obviously LA on the agent's system.
 - must do more testing to see if there are better ways of doing this
